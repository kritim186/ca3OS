#include<stdio.h>
#include<stdlib.h>
#define N 100
int n;
struct process
{
    int pid;
    int priority;
    int burst_time;
    int remaining_time;
    int waiting_time;
    int turnaround_time;
}p[N];
void input()
{
    printf("Enter number of processes:");
    scanf("%d",&n);
    for(int i=0;i<n;i++)
    {
        printf("\nEnter priority and burst time of process %d:",i+1);
        scanf("%d%d",&p[i].priority,&p[i].burst_time);
        p[i].pid=i+1;
        p[i].remaining_time=p[i].burst_time;
    }
}
void display()
{
    printf("\n\nProcess\tPriority\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for(int i=0;i<n;i++)
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n",p[i].pid,p[i].priority,p[i].burst_time,p[i].waiting_time,p[i].turnaround_time);
}
void round_robin()
{
    int time_quantum=3;
    int time=0;
    int flag=0;
    while(1)
    {
        flag=0;
        for(int i=0;i<n;i++)
        {
            if(p[i].remaining_time>0 && p[i].priority>=1 && p[i].priority<=3)
            {
                flag=1;
                if(p[i].remaining_time>time_quantum)
                {
                    time+=time_quantum;
                    p[i].remaining_time-=time_quantum;
                }
                else
                {
                    time+=p[i].remaining_time;
                    p[i].waiting_time=time-p[i].burst_time;
                    p[i].remaining_time=0;
                }
            }
        }
        if(flag==0)
            break;
    }
}
void priority_scheduling()
{
    for(int i=0;i<n-1;i++)
        for(int j=i+1;j<n;j++)
            if(p[j].priority<p[i].priority)
            {
                struct process temp=p[j];
                p[j]=p[i];
                p[i]=temp;
            }
}
void sjf()
{
    for(int i=0;i<n-1;i++)
        for(int j=i+1;j<n;j++)
            if(p[j].burst_time<p[i].burst_time)
            {
                struct process temp=p[j];
                p[j]=p[i];
                p[i]=temp;
            }
}
void multilevel_queue_scheduling()
{
    round_robin();
    priority_scheduling();
    sjf();
}
void calculate_waiting_and_turnaround_times()
{
    for(int i=0;i<n;i++)
        p[i].turnaround_time=p[i].burst_time+p[i].waiting_time;
}
int main()
{
    input();
    multilevel_queue_scheduling();
    calculate_waiting_and_turnaround_times();
    display();
}
